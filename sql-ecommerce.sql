SELECT * FROM ecommerce.customers;

-- Basic Queries
-- 1. List all unique cities where customers are located.
select distinct (customer_city) from ecommerce.customers;

-- 2. Count the number of orders placed in 2017.
select count(order_id) from ecommerce.orders where year(order_purchase_timestamp)=2017;
-- 3. Find the total sales per category.
select ecommerce.products.product_category as category, round(sum(ecommerce.payments.payment_value),2) as sales
from ecommerce.products
join ecommerce.order_items
on  ecommerce.products.product_id=ecommerce.order_items.product_id
join ecommerce.payments
on ecommerce.payments.order_id=ecommerce.order_items.order_id
group by category;
-- 4. Calculate the percentage of orders that were paid in installments.
select (sum(case when ecommerce.payments.payment_installments>=1 then 1 else 0 end))/count(*)*100  as percentage
from ecommerce.payments;

-- 5. Count the number of customers from each state. 
select ecommerce.customers.customer_state as states,count(*) as total from ecommerce.customers group by states;
-- Intermediate Queries
-- 1. Calculate the number of orders per month in 2018.
select monthname(ecommerce.orders.order_purchase_timestamp) as months,count(ecommerce.orders.order_id) as total_orders
from ecommerce.orders
where year(ecommerce.orders.order_purchase_timestamp)=2018
group by months;

-- 2. Find the average number of products per order, grouped by customer city.
with count_per_order as
(select ecommerce.orders.order_id, ecommerce.orders.customer_id,count(ecommerce.order_items.order_id) as oc
from ecommerce.orders
join ecommerce.order_items
on ecommerce.orders.order_id=ecommerce.order_items.order_id
group by ecommerce.orders.order_id, ecommerce.orders.customer_id)
select ecommerce.customers.customer_city,round(avg(count_per_order.oc),2) as average_orders
from ecommerce.customers 
join count_per_order
on  ecommerce.customers.customer_id=count_per_order.customer_id
group by ecommerce.customers.customer_city;
-- 3. Calculate the percentage of total revenue contributed by each product category.

Select upper(ecommerce.products.product_category) as category,
round((sum(ecommerce.payments.payment_value)/(select sum(payments.payment_value)from ecommerce.payments))*100,2) as sales
from ecommerce.products join ecommerce.order_items 
on ecommerce.products.product_id=ecommerce.order_items.product_id
join ecommerce.payments 
on ecommerce.payments.order_id=ecommerce.order_items.order_id
group by category
order by sales desc;

# select sum(payments.payment_value)from ecommerce.payments;

-- 4. Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category,count(order_items.product_id),
round(avg(order_items.price),2)
from  ecommerce.products
join  ecommerce.order_items
on  products.product_id=order_items.product_id
group by products.product_category;

-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.
select *,dense_rank()over(order by revenue desc) as rnk
from
(select order_items.seller_id,round(sum(payments.payment_value),2) as revenue
from   ecommerce.order_items
join   ecommerce.payments
on order_items.order_id=payments.order_id
group by order_items.seller_id) as a;

-- Advanced Queries
-- 1. Calculate the moving average of order values for each customer over their order history.
select customer_id,order_purchase_timestamp,payment,
avg(payment)over(partition by customer_id order by order_purchase_timestamp rows between 2 preceding and current row) as mov_avg
from
(select orders.customer_id,orders.order_purchase_timestamp,
payments.payment_value as payment
from ecommerce.payments
join
ecommerce.orders
on payments.order_id=orders.order_id) as a;

-- 2. Calculate the cumulative sales per month for each year.
select years,months,payment,round(sum(payment)over(order by years,months),2) as cumulative_sales
from
(select year(orders.order_purchase_timestamp) as years,
monthname(orders.order_purchase_timestamp) as months,
round(sum(payments.payment_value),2) as payment
from  ecommerce.orders
join  ecommerce.payments
on orders.order_id=payments.order_id
group by years,months
order by years,months) as a;

-- 3. Calculate the year-over-year growth rate of total sales.

with a as (select year(orders.order_purchase_timestamp) as years,
round(sum(payments.payment_value),2) as payment
from    ecommerce.orders
join    ecommerce.payments
on orders.order_id=payments.order_id
group by years
order by years)
select years,payment,
round(((payment-lag(payment,1)over(order by years))/lag(payment,1)over(order by years))*100,2) as YOY_Growth
 from a ;

-- 4. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
with a  as (select customers.customer_id,
min(orders.order_purchase_timestamp) as first_order
from   ecommerce.customers 
join   ecommerce.orders
on customers.customer_id=orders.customer_id
group by  customers.customer_id),

b as (select a.customer_id,count(distinct orders.order_purchase_timestamp) as next_order
from a
join ecommerce.orders
on orders.customer_id=a.customer_id 
and orders.order_purchase_timestamp>first_order
and orders.order_purchase_timestamp<date_add(first_order,interval 6 month)
group by  a.customer_id)

select 100*(count(distinct a.customer_id)/count(distinct b.customer_id))
from a 
left join b
on  a.customer_id= b.customer_id;

-- 5. Identify the top 3 customers who spent the most money in each year.
select years,customer_id,payment,d_ranks
from
(select year(orders.order_purchase_timestamp) as years,
orders.customer_id,
sum(payments.payment_value) as payment,
dense_rank()over(partition by year(orders.order_purchase_timestamp) order by sum(payments.payment_value) desc) as d_ranks 
from ecommerce.orders
join ecommerce.payments
on payments.order_id=orders.order_id
group by year(orders.order_purchase_timestamp),orders.customer_id) as a
where d_ranks<=3;






